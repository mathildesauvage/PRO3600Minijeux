package memory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Optional;

import javafx.animation.Animation.Status;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.CycleMethod;
import javafx.scene.paint.LinearGradient;
import javafx.scene.paint.Stop;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;


public class Main extends Application {

	static Label GameOver;
	static Label label;
	static int score;
	static Label lb;
	private int NbreParLigne;
	static int NbreDePairs;
	ToggleGroup group = new ToggleGroup();
	Sound s = new Sound("resources/memory/toggle.mp3");
	Sound intro = new Sound("resources/memory/Queen.mp3");

	public static void main(String[] args) {
		launch(args);
	}
	
	public void start(Stage stage) throws Exception{
		intro.play();
		stage.setTitle("Jeu Memory");
		Group group = new Group();
		Scene scene = new Scene(group);
		Fenetre accueil = new Fenetre();
		group.getChildren().addAll(accueil);
		stage.setScene(scene);
		stage.show();
	}
	
	

	
	//CHRONO

	private final static Integer starttime = 0;
	static Integer seconds = starttime;
	static KeyFrame frame = new KeyFrame(Duration.seconds(1), new EventHandler<ActionEvent>(){

		@Override
		public void handle(ActionEvent event) {
			seconds++;
			lb.setText("Temps : " + seconds.toString());
			if (seconds > 99) {
				time.stop();
				GameOver.setVisible(true);
			}
		}
	});
	static Timeline time = new Timeline(frame);

	private Parent Accueil() {
		Pane root = new Pane();
		root.setPrefSize(800, 600);	
		
		time.setCycleCount(Timeline.INDEFINITE);

		LinearGradient lg = new LinearGradient(0,0,0,1,true,CycleMethod.NO_CYCLE,new Stop(0.3f,Color.LAVENDER),new Stop(0.75f,Color.PLUM));
		root.setBackground(new Background(new BackgroundFill(lg, CornerRadii.EMPTY, Insets.EMPTY)));

		Text text = new Text(250,200,"Jeu Memory");
		text.setFont(Font.font("Helvetica", FontWeight.BOLD, 50));
		text.setStroke(Color.TURQUOISE);
		text.setFill(Color.BLACK);

		Text text2 = new Text(250,240,"Choisissez le nombre de cartes : ");
		text2.setFont(Font.font("Helvetica", FontWeight.NORMAL, 20));

		Image on = new Image("resources/memory/on.png",50,50,false,false);
		Image off = new Image("resources/memory/off.png",50,50,false,false);
		ImageView iwOn = new ImageView(on);
		ImageView iwOff = new ImageView(off);
		iwOn.setVisible(false);

		iwOn.setOnMouseClicked(e -> {
			iwOn.setVisible(false);
			iwOff.setVisible(true);
			intro.stop();
		});

		iwOff.setOnMouseClicked(e -> {
			iwOff.setVisible(false);
			iwOn.setVisible(true);
			intro.playNonStop();
		});

		Button start = new Button("Commencer");
		Button retour = new Button("Retour");

		retour.setLayoutX(250);
		retour.setLayoutY(370);
		start.setLayoutX(400);
		start.setLayoutY(370);

		start.setPrefSize(100, 50);
		retour.setPrefSize(100, 50);

		start.setOnAction(e -> { 
			if (time.getStatus() == Status.STOPPED || time.getStatus() == Status.PAUSED  ) {
				time.playFromStart();
			}
			seconds = 0;
			s.play();
			Node source = (Node) e.getSource();
			Stage window = (Stage) source.getScene().getWindow();
			window.setScene(new Scene(leJeu()));
		});

		retour.setOnAction(e -> {
			s.play();
			menu.Main.main(null);
			Node source = (Node) e.getSource();
			Stage window = (Stage) source.getScene().getWindow();
			window.setScene(new Scene(leJeu()));
			window.close();
		});

		ToggleGroup group = new ToggleGroup();

		RadioButton button1 = new RadioButton("8");
		button1.setToggleGroup(group);
		button1.setOnAction( e -> {
			NbreDePairs = 4;
			NbreParLigne = 4;
			s.play();
		});

		RadioButton button2 = new RadioButton("10");
		button2.setToggleGroup(group);
		button2.setOnAction( e -> {
			NbreDePairs = 5;
			NbreParLigne = 5;
			s.play();
		});

		RadioButton button3 = new RadioButton("14");
		button3.setToggleGroup(group);
		button3.setOnAction( e -> {
			NbreDePairs = 7;
			NbreParLigne = 7;
			s.play();
		});

		RadioButton button4 = new RadioButton("24");
		button4.setToggleGroup(group);
		button4.setOnAction( e -> {
			NbreDePairs = 12;
			NbreParLigne = 8;
			s.play();
		});

		VBox menuButtons = new VBox(5);
		menuButtons.getChildren().addAll(button1,button2,button3,button4);

		root.getChildren().addAll(text,menuButtons,text2,start,retour,iwOn,iwOff);

		menuButtons.setLayoutX(350);
		menuButtons.setLayoutY(260);

		return root;
	}

	private Parent leJeu() {
		Pane root = new Pane();
		root.setPrefSize(800, 600);	

		GameOver = new Label("Game over !");
		GameOver.setVisible(false);
		GameOver.setLayoutX(300);
		GameOver.setLayoutY(400);
		GameOver.setFont(Font.font(40));
		GameOver.setTextFill(Color.RED);
		
		label = new Label("Vous avez gagnÃ© !");
		label.setVisible(false);
		label.setLayoutX(300);
		label.setLayoutY(400);
		label.setFont(Font.font(30));
		label.setTextFill(Color.DARKBLUE);
		
		//CHRONO

		lb= new Label("Temps : " + seconds.toString());
		lb.setLayoutX(350);
		lb.setLayoutY(450);
		lb.setFont(Font.font(30));

		//BOUTONS

		Button rejouer = new Button("Rejouer");
		Button menuu = new Button("Menu");
		Button quit = new Button("Quitter");
		Button score = new Button("Score");
		Button retour = new Button("Retour");

		rejouer.setLayoutX(50);
		rejouer.setLayoutY(500);
		retour.setLayoutX(200);
		retour.setLayoutY(500);
		menuu.setLayoutX(350);
		menuu.setLayoutY(500);
		quit.setLayoutX(500);
		quit.setLayoutY(500);
		score.setLayoutX(650);
		score.setLayoutY(500);

		rejouer.setPrefSize(100, 50);
		menuu.setPrefSize(100, 50);
		quit.setPrefSize(100, 50);
		score.setPrefSize(100, 50);
		retour.setPrefSize(100, 50);


		rejouer.setOnAction(e -> {
			if (time.getStatus() == Status.RUNNING) {
				time.stop();
			}
			s.play();
			Alert dialogC = new Alert(AlertType.CONFIRMATION);
			dialogC.setTitle("Jeu Memory");
			dialogC.setHeaderText(null);
			dialogC.setContentText("Voulez-vous rejouer ?");
			Optional<ButtonType> answer = dialogC.showAndWait();
			if (answer.get() == ButtonType.OK) {
				Node source = (Node) e.getSource();
				Stage window = (Stage) source.getScene().getWindow();
				window.setScene(new Scene(leJeu()));
				seconds = 0;
				time.playFromStart();

			}
			else {
				time.play();
			}
		});

		retour.setOnAction(e -> {
			if (time.getStatus() == Status.RUNNING) {
				time.stop();
			}
			s.play();
			Node source = (Node) e.getSource();
			Stage window = (Stage) source.getScene().getWindow();
			window.setScene(new Scene(Accueil()));
		});

		menuu.setOnAction(e -> {
			if (time.getStatus() == Status.RUNNING) {
				time.stop();
			}

			s.play();
			menu.Main.main(null);
			Node source = (Node) e.getSource();
			Stage window = (Stage) source.getScene().getWindow();
			window.setScene(new Scene(leJeu()));
			window.close();
		});

		quit.setOnAction(e -> {
			if (time.getStatus() == Status.RUNNING) {
				time.stop();
			}

			s.play();
			Alert dialogC = new Alert(AlertType.CONFIRMATION);
			dialogC.setTitle("Jeu Memory");
			dialogC.setHeaderText(null);
			dialogC.setContentText("Voulez-vous vraiment quitter ?");
			Optional<ButtonType> answer = dialogC.showAndWait();
			if (answer.get() == ButtonType.OK) {
				Node source = (Node) e.getSource();
				Stage window = (Stage) source.getScene().getWindow();
				window.close(); //quitter le jeu
			}
		});

		score.setOnAction(e -> {
			s.play();
			
			Node source = (Node) e.getSource();
			Stage window = (Stage) source.getScene().getWindow();
			window.setScene(new Scene(leJeu()));
			window.close();
			resultat2.Main.main(null);
		});

		//MISE EN PLACE DES IMAGES

		Image im1 = new Image("resources/memory/chaton.jpg",100,100,false,false);
		Image im2 = new Image("resources/memory/chiot.jpg",100,100,false,false);
		Image im3 = new Image("resources/memory/lapin.jpg",100,100,false,false);
		Image im4 = new Image("resources/memory/chevre.jpg",100,100,false,false);
		Image im5 = new Image("resources/memory/phoque.jpg",100,100,false,false);
		Image im6 = new Image("resources/memory/giraffe.jpeg",100,100,false,false);
		Image im7 = new Image("resources/memory/singe.jpeg",100,100,false,false);
		Image im8 = new Image("resources/memory/renard.jpeg",100,100,false,false);
		Image im9 = new Image("resources/memory/tigre.jpeg",100,100,false,false);
		Image im10 = new Image("resources/memory/elephant.jpeg",100,100,false,false);
		Image im11 = new Image("resources/memory/ecureuil.jpeg",100,100,false,false);
		Image im12 = new Image("resources/memory/lion.jpg",100,100,false,false);

		Image images[] = {im1,im2,im3,im4,im5,im6,im7,im8,im9,im10,im11,im12};

		ArrayList<Carte> cartes = new ArrayList<>();
		for (int i=0; i<NbreDePairs; i++) {
			cartes.add(new Carte(images[i]));
			cartes.add(new Carte(images[i]));
		}

		Collections.shuffle(cartes); //melanger les images

		for (int i = 0; i < cartes.size(); i++) {
			Carte c = cartes.get(i);
			c.setTranslateX(100 * (i % NbreParLigne));
			c.setTranslateY(100 * (i / NbreParLigne));
			root.getChildren().add(c);
		} //afficher les images

		root.getChildren().addAll(quit,score,menuu,retour,rejouer,lb,label,GameOver);
		return root;

	}

}